# syntax=docker/dockerfile:1
FROM debian:12 as setup
ARG GIT_TAG=
RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && \
apt-get install -y build-essential cmake curl file g++ git \
libnotify-dev libusb-1.0-0-dev libxml2-dev ninja-build \
qt6-base-dev qt6-l10n-tools qt6-tools-dev qt6-tools-dev-tools
WORKDIR /linuxdeploy
RUN export ARCH="$(uname -m)" && \
curl -L -o linuxdeploy.AppImage https://github.com/linuxdeploy/linuxdeploy/releases/download/1-alpha-20250213-2/linuxdeploy-${ARCH}.AppImage && \
chmod +x linuxdeploy.AppImage
WORKDIR /linuxdeploy-plugin-qt
RUN export ARCH="$(uname -m)" && \
curl -L -o linuxdeploy-plugin-qt.AppImage https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/1-alpha-20250213-1/linuxdeploy-plugin-qt-${ARCH}.AppImage && \
chmod +x linuxdeploy-plugin-qt.AppImage
WORKDIR /
RUN git clone "https://github.com/robxnano/qcma.git" --depth 1 "${GIT_TAG:+--branch=$GIT_TAG}"

FROM setup as build
ARG JOBS=
ARG PREFIX=/usr
WORKDIR /qcma
RUN cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="${PREFIX}"
RUN cmake --build build ${JOBS:+-j=${JOBS}}

FROM build as install
ARG PREFIX=/usr
RUN cmake --install build --prefix="/install${PREFIX}"
WORKDIR /install
RUN export ARCH="$(uname -m)" && \
tar -czf /qcma-linux-${ARCH}.tar.gz "$(ls)"

FROM install as build-appimage
WORKDIR /
RUN \
/linuxdeploy/linuxdeploy.AppImage --appimage-extract-and-run --appdir /install --output appimage && \
/linuxdeploy-plugin-qt/linuxdeploy-plugin-qt.AppImage --appimage-extract-and-run --appdir /install && \
/linuxdeploy/linuxdeploy.AppImage --appimage-extract-and-run --appdir /install --output appimage

FROM scratch as appimage
COPY --from=build-appimage /Qcma-*.AppImage /

FROM scratch as binaries
COPY --from=install /qcma-linux-*.tar.gz /
